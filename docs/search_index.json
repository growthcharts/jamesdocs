[["index.html", "JAMES Documentation Preface", " JAMES Documentation Stef van Buuren, Arjan Huizing 2021-06-02 Preface Hi, welcome to JAMES! This document contains documentation of the Joint Automatic Measurement and Evaluation System (JAMES). JAMES is fully programmed in R and makes it functionality available as an API running under OpenCPU. This contents of the file is fully in the works. It is it neither complete nor garanteed to be accurate, consider it as a journey guide for your travel through JAMES. Nevertheless, I hope that it will help to understand basic ideas, technologies and applications. Last version: June 2021. "],["intro.html", "Chapter 1 Introduction 1.1 Overview 1.2 Architecture 1.3 R packages 1.4 JESSE 1.5 JAMES servers 1.6 Resources", " Chapter 1 Introduction 1.1 Overview This chapter gives a brief overview the Joint Automatic Measurement and Evaluation System (JAMES). JAMES is an experimental web service for creating and interpreting charts of child growth and development. The current version provides access to high-quality over 300 growth charts used by the Dutch youth health care; interchanges data coded according to the Basisdataset JGZ; screens for abnormal height, weight and head circumference; converts developmental data into the D-score; plot D-scores on special D-score charts; predicts future growth and development. The service can be used by anyone interested in high-quality charts for monitoring and evaluating childhood growth and development. This chapter highlights the components of JAMES. 1.2 Architecture JAMES provides its services through OpenCPU, an open system for scientific computing and reproducible research. The system allows for easy integration of growth charts into any HTTPS compliant client by means of OpenCPU’s API. The JAMES webservice is a RESTful Application Programming Interface (API). The contents of the system consist of two parts: JAMES: A collection of R packages that provides back-end functionality JESSE: A gateway front-end JAMES that translates incoming and outcoming requests (not yet realised) 1.3 R packages 1.3.1 JAMES Active packages Active packages reside on the JAMES server and provide all functionality. Package Open Description james Y Joint Automatic Measurement and Evaluation System nlreferences Y Growth References for Children living in The Netherlands centile Y Translate Measurements, Z-Scores and Centiles with the RIF format chartbox Y Collection of Growth Charts chartcatalog Y Catalog of JAMES Growth Charts chartplotter N Analysing and Plotting Growth Curves curvematching N Personalised Prediction by Matching Invididuals donorloader N Loads Donor Data from Package or Database brokenstick Y Broken Stick Model for Irregular Longitudinal Data dscore Y D-Score for Child Development bdsreader Y Read Data from the Basisdataset Jeugdgezondheidszorg growthscreener Y Finding Children with Unusual Growth Patterns jamesclient Y Client-side R Functions for JAMES jamesdemodata Y Demo Data for JAMES 1.3.2 JAMES Support packages Support packages produce half-fabricated materials, provide testing or store documentation. Package Open Description donordata N Longitudinal Data for Curve Matching chartdesigner N Design Growth Charts for JAMES gateway N Entry to TNO online analytic growth modules jamesdocker N JAMES Docker API bdsschema Y Data Exchange Tools for the Basisdataset JGZ jamesdemo Y App to interact with the JAMES chart site minihealth Y Mini Dossier for Individual Health Data clopus N Growth reference library jamesdocs Y JAMES Documentation 1.4 JESSE 1.5 JAMES servers Production: https://groeidiagrammen.nl/ocpu/test/, Docs (outdated): https://groeidiagrammen.nl Test: https://vps.stefvanbuuren.nl/ocpu/test/ Future: james.tno.nl 1.6 Resources Demo JAMES at https://tnochildhealthstatistics.shinyapps.io/james_tryout/ OpenCPU system OpenCPU API https://www.tno.nl/groei, https://www.tno.nl/growth "],["james-data-format.html", "Chapter 2 JAMES data format 2.1 Objective 2.2 Generic object model 2.3 BDS-elements 2.4 Error checking 2.5 Note (added June 2, 2021)", " Chapter 2 JAMES data format 2.1 Objective This chapter describes the format of the input data accepted by JAMES. The specification closely follows the definition of the Basisdataset JGZ 3.25 (2018); defines data objects; defines the actions taken by JAMES in case of incorrect, missing or out-of-range data; defines the error messages for informing the client. 2.2 Generic object model 2.2.1 EPremDossier Class 2.2.1.1 Object model EPremDossier Instance Class -&gt; Clientgegevens EPremGroep -&gt; Contactmomenten EPremContactmoment 2.2.1.2 Syntax C# public class EPremDossier 2.2.1.3 Public properties Name Description Required Clientgegevens Class with basic child data Y Contactmomenten Class with data per visit N InstrumentCode Integer identifying the instrument Ignored OrganisatieCode Integer identifying the care organisation Y Referentie String identifying the request N 2.2.2 EPremGroep Class 2.2.2.1 Object model EPremGroep Instance Class -&gt; Elementen EPremElement -&gt; Groepen EPremGroep 2.2.2.2 Syntax C# public class EPremGroep 2.2.2.3 Public properties Name Description Required Elementen Class with BDS-elements Y Groepen Class with groups of BDS-elements N 2.2.3 EPremElement Class 2.2.3.1 Syntax C# public class EPremElement 2.2.3.2 Public properties Name Description Required Bdsnummer Integer identifying the BDS-field Y InternNummer Integer identifying internal field Ignored Waarde Value of the BDS-field Y Waardeomschrijving Descriptive label for value Ignored 2.2.4 EPremContactmoment Class 2.2.4.1 Object model EPremContactmoment Instance Class -&gt; Elementen EPremElement -&gt; Groepen EPremGroep 2.2.4.2 Syntax C# public class EPremContactmoment : EPremGroep 2.2.4.3 Public properties Name Description Required Elementen Class with BDS-elements Y Groepen Class with groups of BDS-elements N Tijdstip Date of visit Y 2.3 BDS-elements BDS Description Value Label Required 19 Sex of child “0” Unknown Y “1” Male “2” Female “3” Not specified 20 Date of birth “yyyymmdd” year-month-day Y 62 Caretaker relation “01” biological father N “02” biological mother “03” male partner, stepfather “04” female partner, stepmother “05” adoptive father “06” adoptive mother “07” foster father “08” foster mother “98” other 63 Caretaker date of birth “yyyymmdd” year-month-day N 66 Caretaker education “01” no primary school N “02” primary school, special ed “03” VSO-MLK/IVBO/VMBO-LWOO “04” LBO/VBO/VMBO-BBL&amp;KBL “05” MAVO/VMBO-GL&amp;TL “06” MBO “07” HAVO/VWO “08” HBO/HTS/HEAO “09” WO “98” Other “00” Unknown 71 Caretaker birth country “dddd” 4-digit code, Table 34 N 82 Gestational age “ddd” in days N 91 Smoking during pregnancy “1” yes N “2” no “99” unknown 110 Birth weight “dddd” 3-4 digits, grammes N 235 Length/height “dddd” 3-4 digits, millimeters N 245 Body weight “dddddd” 3-6 digits, grammes N 252 Head circumference “ddd” 2-3 digits, millimeters N 238 Height biological mother “dddd” 3-4 digits, millimeters N 240 Height biological father “dddd” 3-4 digits, millimeters N 510 Passive smoking “01” No smoking in house N “02” Never with child “03” Not in last 7 days “04” Yes 2.4 Error checking Error checking of the JSON data occurs in three phases: PHASE 1: Check whether the JSON data are valid JSON. The process terminates with an error message if the input JSON is not valid. PHASE 2: Validate the JSON data against the JSON schema specification. The process terminates with an error if any required fields are missing. The process generates messages for data points that do not conform to the JSON schema, but continues. PHASE 3: Check the range of the numeric data. The process generates messages for out-of-range values, but continues using the specified values. The default JSON schema in phase 2 is the built-in JSON schema bds_schema_str.json, a data format implementing a version that accepts strings as values for BDS-elements. You may also choose JSON schema bds_schema.json, which requires numeric input to be specified as numeric (and not as string). 2.5 Note (added June 2, 2021) The JAMES function now also reads, validates and interprets BDS fields related to the Van Wiechenschema (Dutch Development Instrument). See https://growthcharts.org/bdsreader/index.html and https://github.com/growthcharts/jamesdemodata. "],["growth-charts-in-james.html", "Chapter 3 Growth charts in JAMES 3.1 Chart naming conventions", " Chapter 3 Growth charts in JAMES 3.1 Chart naming conventions The link https://groeidiagrammen.nl/ocpu/lib/james/www/ contains an interactive overview of the available growth charts. There are many different charts: for boys and girls, for preterms, for different age ranges, for specific ethnic groups, for height, weight, BMI, and so on. Each chart has a chart code, a character code identifying the design. This section explains the construction of the chart codes. The GitHub repository https://github.com/growthcharts/chartbox contains the chart libraries that are available to JAMES. The list_charts() function produces a tabular overview. charts &lt;- chartbox::list_charts() dim(charts) ## [1] 394 8 charts[c(1, 22, 23, 300, 301, 340), ] ## chartgrp chartcode population sex design side language week ## 1 nl2010 HJAA HS male A front dutch ## 22 nl2010 HMBH HS female B hgt dutch ## 23 nl2010 HMBR HS female B wfh dutch ## 300 preterm PMAHN28 PT female A hgt dutch 28 ## 301 preterm PMAHN29 PT female A hgt dutch 29 ## 340 preterm PMEAN32 PT female E front dutch 32 The chartbox package currently contains three chart groups: nl2010, preterm and who. Each group collects charts of a similar type. Chart Group N Chart code Description Source nl2010 140 CCCC Dutch children 0-21 years, including minorities Talma et al. (2010) preterm 240 CCCCCNN Dutch preterms, ga &lt;= 36 weeks, 0-4 years Bocca-Tjeertes et al. (2012) who 14 CCCC WHO Child Growth Standards 0-4 years WHO The chart code is an alpha-numeric code of four (for nl2010 and who) or seven (for preterm) that uniquely identifies each of the charts. The table below specifies the full coding schema used to construct the chart codes. Position Field Value Description 1 Population N Dutch T Turkish M Moroccan H Hindostan P Preterm W WHO 2 Sex J Male M Female 3 Design A 0-15 months B 0-4 years, WFH C 1-21 years D 0-21 years E 0-4 years, WFA 4 Side A A4, front B A4, back C A4, back, no hdc D square, dsc H square, hgt O square, hdc Q square, bmi R square, wfh W square, wgt X A4, double sided 5 Language N Dutch E English 6-7 Week 25-36 Gestational age For illustration, code NJAA references to Dutch (N), boys (J), 0-15 month (A), front side (A). Likewise, PMEAN33 codes for the chart of preterm (M), girls (M), 0-4 years (E), front side (A), Dutch language (N) born at 33 weeks of gestation (33). Some forms hold multiple growth charts. For example, the NJAA chart is designed for A4 paper size (297mm \\(\\times\\) 210mm) and contains three growth charts: head circumference by age, length by age, and weight by age. Some others have no diagram, like NJAB. All square formats hold just one growth chart. All of the square forms have equal sizes (160mm \\(\\times\\) 160mm). The following table lists the measures per design-form combination. Design Side Measure Description A A hdc Head circumference by age, 0-15 mo hgt Length by age, 0-15 mo wgt Weight by age, 0-15 mo B Backside explanations D dsc D-score by age, 0-15 mo H hgt Length by age, 0-15 mo O hdc Head circumference by age, 0-15 mo W wgt Weight by age, 0-15 mo B A wfh Weight for height, 0-4 yr hgt Length by age, 0-4 yr B hdc Head circumference by age, 0-4 yr C Backside explanations D dsc D-score by age, 0-4 yr H hgt Height by age, 0-4 yr O hdc Head circumference by age, 0-4 yr R wfh Weight for height, 0-4 yr W wgt Weight by age, 0-4 yr C A wfh Weight for height, 1-21 yr hgt height by age, 1-21 yr B bmi BMI by age, 1-21 yr hdc Head circumference by age, 1-21 yr C bmi BMI by age, 1-21 yr H hgt Height by age, 1-21 yr O hdc Head circumference by age, 1-21 yr Q bmi Body mass index by age, 1-21 yr R wfh Weight for height, 1-21 yr E A wgt Weight by age, 0-4 yr hgt height by age, 0-4 yr B hdc Head circumference by age, 0-4 yr H hgt Height by age, 0-4 yr O hdc Head circumference by age, 0-4 yr W wgt Weight by age, 0-4 yr References "],["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],["d-score-implementation.html", "Chapter 5 D-score implementation 5.1 Actions", " Chapter 5 D-score implementation This document describes the actions taken to implement the D-score into JAMES. The functionality of JAMES is distributed over multiple packages. This set of actions may be of interest when implementing new features. 5.1 Actions Package PR Description minihealth 03a32f1 Create milestones descriptions dscore f0013ce Link BDS number to Van Wiechen milestones dscore 6886854 Fine tuning of milestone labels minihealth Create the bds_lexicon object minihealth 4893982 Add milestones to BDS validation JSON schema minihealth 0069671 Add convert_ddi_gsed() to convert BDS-milestones into GSED items minihealth 8ab1392 Add a new class individualDS for storing milestones, D-score and DAZ clopus 1182cb0 Add Dutch and GCDG D-score references clopus 7bdbcd9 Construct age-shifted D-score references for preterms clopus ceab7f9 Import the D-score references into clopus chartdesigner 6883190 Add chart constructor functions for D-score, both terms and pre-terms chartdesigner 511f456 Extend internal set.axes.design() to D-score charts chartdesigner 6582af8 Extend to axes.locations object to D-score charts chartdesigner 47e3cc3 Create dchart() function and extend its helper functions chartdesigner fbbc7c8 Function chartcode() factory, make one function for each chart code chartcatalog cc46788 Extend the chart naming system to D-score charts chartcatalog 84aaded Extend the lookup table ynames_lookup to handle new D-score charts chartbox aa31067 Extend chart box with all D-score charts james 6412840 Add radio button for D-score charts minihealth 06a04c9 Calculate D-score and DAZ chartplotter 4b58638 Skip the dsc field for finding matches minihealth 816be33 Add D-score and DAZ to class individualAN donordata 77e01b4 Add milestones to SMOCC donor data donordata ecb3413 Calculate D-score and DAZ for SMOCC data donordata 3fa9d4d Fit and store brokenstick model for D-score on SMOCC data donorloader c22c446 Update internal data after changes in donordata jamesdocs TBD Document steps (this file) donordata 7983c3 Saves the item scores to create JSON files donordata 1537182 Save mapping between SMOCC and BDS coding scheme donorloader e9a8ed Make smocc_bds available to JAMES jamestest 648419 Regenerate smocc JSON files to include DDI scores jamestest ce1dbe Update the installed.cabinets object with the new individual milestones data minihealth 4dda8d Add class individualRW to store and convert raw milestones data minihealth 9e03e7 Complete the JSON validator schema "],["opencpu-deployment.html", "Chapter 6 OpenCPU deployment 6.1 Objective 6.2 Pre-requisites 6.3 Installation of JAMES in", " Chapter 6 OpenCPU deployment 6.1 Objective This chapter describes how to install JAMES on the server that run OpenCPU. This is the classic way to install and run OpenCPU applications, and has the advantage that AppArmor prevents various types of malicious behaviour. In the future, we will replace this procedure by containerised deployment using Docker. 6.2 Pre-requisites The server runs Ubuntu 18.04 (or later, not tested on Ubuntu 20.04). The user needs sudo access to the server that run OpenCPU. 6.3 Installation of JAMES in Here is a set of commands that removes R and its libraries, installs the latest R fresh from source, install JAMES and puts the machine to work. A lot can go wrong. Please be patient to check each step. #!/bin/bash # Re-install opencpu-server, R and the libs # make system up to date sudo apt-get update sudo apt-get upgrade # disable opencpu sudo a2dissite opencpu sudo apachectl restart # disable pubertyplot &amp; webtool (only on testserver) sudo a2dissite puberty sudo a2dissite webtool sudo apachectl restart # save configuration files mkdir conf cp -rv /etc/opencpu/ ~/conf/ cp -rv /etc/apache2/ ~/conf/ # uninstall opencpu server &amp; full sudo apt-get purge opencpu-server sudo apt-get purge opencpu-full # remove all R libs R -e &#39;.libPaths()&#39; sudo rm -rf /usr/local/lib/R/site-library sudo rm -rf /usr/lib/R/site-library sudo rm -rf /usr/lib/R/library # remove R sudo apt-get purge r-base-core sudo apt-get purge r-base sudo apt-get autoremove # add backport repositories for Ubuntu packages required by some R packages sudo add-apt-repository &#39;deb https://mirror.nl.datapacket.com/ubuntu/ bionic main&#39; sudo add-apt-repository &#39;deb-src https://mirror.nl.datapacket.com/ubuntu/ bionic main&#39; # install R. See https://cran.r-project.org/bin/linux/ubuntu/ # update indices sudo apt update -qq # install two helper packages we need sudo apt install --no-install-recommends software-properties-common dirmngr # import the signing key (by Michael Rutter) for these repo sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 # we use R 4.0 (however note this actually installs R 4.1!! (May 2021)) sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/&#39; # in the future: use cran-41 sudo apt install r-base # install r-base-dev because we want to compile from source sudo apt-get install r-base-dev # install opencpu-server sudo add-apt-repository -y ppa:opencpu/opencpu-2.2 sudo apt-get update sudo apt-get upgrade sudo apt-get install -y opencpu-server # restart opencpu sudo a2ensite opencpu sudo apachectl restart # manually check https://vps.stefvanbuuren.nl/ocpu # or https://www.groeidiagrammen.nl/ocpu # install application package: pubertyplot - only on dev server sudo R -e &#39;install.packages(&quot;/home/stef/packages/pubertyplot_1.3.tar.gz&quot;, repos = NULL)&#39; sudo a2ensite puberty sudo apachectl restart # install application package: webtool - only on dev server sudo R -e &#39;install.packages(&quot;RMySQL&quot;)&#39; sudo R -e &#39;install.packages(&quot;/home/stef/packages/webtool_1.1.tar.gz&quot;, repos = NULL)&#39; sudo a2ensite webtool sudo apachectl restart # install JAMES packages - this may take a while - you need the right priveledges sudo R -e &#39;install.packages(&quot;remotes&quot;)&#39; sudo R -e &#39;remotes::install_github(&quot;growthcharts/james&quot;)&#39; # remove duplicate packages # evade errors: &quot;namespace &#39;vctrs&#39; 0.3.6 is already loaded, but &gt;= 0.3.8 is required&quot; sudo R -e &#39;remove.packages(c(&quot;ellipsis&quot;, &quot;pillar&quot;, &quot;vctrs&quot;), &quot;/usr/lib/opencpu/library&quot;)&#39; # copy back opencpu configuration for JAMES (if they were OK, otherwise tweak) sudo rm -rf /etc/opencpu sudo cp -rv ~/conf/opencpu /etc/opencpu/ # active JAMES sudo apachectl restart # check on https://tnochildhealthstatistics.shinyapps.io/james_tryout/ # clean up: delete ~/conf/ after everything works rm -rf conf "],["dockerfile-for-james.html", "Chapter 7 Dockerfile for JAMES 7.1 Objective 7.2 Pre-requisites 7.3 Dockerfile 7.4 Docker commands 7.5 Checks with the browser 7.6 Security", " Chapter 7 Dockerfile for JAMES 7.1 Objective This chapter describes how to build and deploy JAMES as a Docker container. 7.2 Pre-requisites JAMES is currently constructed from a collection of R packages. The top-level package at https://github.com/growthcharts/james also defines a Javascript interface in the inst/www directory. Deployment of JAMES relies on the OpenCPU server. In principle, it is enough to install the james package on the OpenCPU server, and will also install all dependencies. The following is needed to build and run a JAMES image: Permission to read from the following private repo’s: growthcharts/chartplotter growthcharts/curvematching growthcharts/donorloader growthcharts/jamesdocker If needed, a personal Github token with repo scope from here, Generate a token with only scope repo. Install Docker Desktop on your local machine, and run some tutorials 7.3 Dockerfile The Dockerfile is at https://raw.githubusercontent.com/growthcharts/jamesdocker/master/Dockerfile, which is located in the private repo https://github.com/growthcharts/jamesdocker. You need authentication to use this resource. Clone the growthcharts/jamesdocker repo to your machine Set working directory to root of jamesdocker If needed: Add the file docker/opencpu_config/Renviron with contents GITHUB_PAT=fa2... with your own GITHUB_PAT. 7.4 Docker commands Build the james image, type in a terminal docker build -t james . This may takes a long time (30 minutes), in which the entire application is downloaded from various web-locations. After (hopefully successful) completion, check the image docker images -a If all is well, the top line is called james. Now run the container on your local machine: docker run -t -d -p 80:80 james If the ports are already taken by other containers, stop and remove all containers: docker stop $(docker ps -a -q) docker rm $(docker ps -a -q) Reissue the docker run, and the container should now run. Check by docker ps which should list a container created from the james image. If you want to enter the container use docker exec -i -t 6c /bin/bash where 6c are the first two characters of the container ID. Inside the container, check font matching of Arial as fc-match Arial 7.5 Checks with the browser http://localhost should show Apache2 Ubuntu default screen. http://localhost/ocpu/test/ should show OpenCPU test page. http://localhost/rstudio/ should start the Rstudio IDE - if installed . Use opencpu:opencpu to log in. http://localhost/ocpu/library/james/www/ should start the JAMES javascript interface. See also https://registry.hub.docker.com/r/opencpu/rstudio 7.6 Security Don’t use the intermediate container, since it will contain your token in /.Renviron. The latest (james) container does not hold your token, and can be shared. The container is shielded from the machine on which it runs. However, the materials within the container are only protected by R_LIMITS. In general, for production it is wise to add restriction on the OpenCPU server. "],["certificates.html", "Chapter 8 Certificates 8.1 Objective 8.2 vps.stefvanbuuren.nl", " Chapter 8 Certificates 8.1 Objective The use of htpps requires that Apache runs with proper and validated certificates. Users can assess the status of the certificate by clicking on the slot in the browser bar. Certificates are issues by a Certificate Authority (CA) and are valid for one year. The period of one year is just enough to forget how to install and update certificates. This text shows how to renew the certificate. 8.2 vps.stefvanbuuren.nl The server runs Ubuntu 18.04 LTS. The Apache configuration file /etc/apache2/sites-enabled/default-ssl.conf contains the following lines SSLCertificateFile /etc/ssl/crt/vps.stefvanbuuren.nl.chained.crt SSLCertificateKeyFile /etc/ssl/crt/vps.stefvanbuuren.nl.key The file .key is the private key, which should not leave the machine and only be read/write by sudoers. The file ..chained.crt is the certificate file, which needs to be updated after expiry. There is some hand work involved in creating this file. 8.2.1 Step 1: Create the CSR file ssh into vps.stefvanbuuren.nl cd /etc/ssl/crt openssl req -new -newkey rsa:2048 -nodes -keyout vps.stefvanbuuren.nl.key -out vps.stefvanbuuren.nl.csr You need to answer some questions (See http://edtechchris.com/2020/02/11/generate-csr-with-openssl-on-ubuntu/). Show the result: cat vps.stefvanbuuren.nl.csr Copy the contents of the CSR file onto the clipboard. Save also on desktop under Package/james/certificates_vps.stefvanbuuren.nl/{expiryyear} for archiving. 8.2.2 Step 2: Buy new certificate The current CA is Network Solutions. Log into their website, and pay their renewal fee (about $86 per year). Select Apache/Ubuntu, paste CSR clipboard file into appropriate box, and submit. Within 30 minutes you get a request to validate in the mailbox. After that is done, you get a new mail saying that certificates are available. Download everything. 8.2.3 Step 3: Create the crt file Collect the following four files into Package/james/certificates_vps.stefvanbuuren.nl/{expiryyear}. dv_chain.txt DV_NetworkSolutionsDVServerCA2.crt DV_USERTrustRSACertificationAuthority.crt VPS.STEFVANBUUREN.NL.crt Create a new file as follows: Open with text editor dv_chain.txt and VPS.STEFVANBUUREN.NL.crt Paste the contents of VPS.STEFVANBUUREN.NL.crt before the contents of dv_chain.txt. There will be three sections. Save the result under file name vps.stefvanbuuren.nl.chained.crt 8.2.4 Step 4: Transfer to server Copy the file onto the server, home directory, by ftp. Move it in place by sudo mv vps.stefvanbuuren.nl.chained.crt /etc/ssl/crt/vps.stefvanbuuren.nl.chained.crt This overwrites the expired certificate. 8.2.5 Step 5: Restart Apache2 If you changed /etc/apache2/sites-enabled/default-ssl.conf check for syntactic validity. apachectl configtest If OK, then sudo apachectl restart If all is well, Apache restarts and uses the updated certificate. 8.2.6 Troubleshooting If it doesn’t work, check whether the results of the following statements are identical. openssl x509 -noout -modulus -in vps.stefvanbuuren.nl.chained.crt | openssl md5 sudo openssl rsa -noout -modulus -in vps.stefvanbuuren.nl.key | openssl md5 If not, there is a mismatch between private key and certificate. See https://stackoverflow.com/questions/26191463/ssl-error0b080074x509-certificate-routinesx509-check-private-keykey-values?rq=1 for fixes. For others errors, consult the standard log sudo tail -f /var/log/apache2/error.log "],["references.html", "References", " References "]]
